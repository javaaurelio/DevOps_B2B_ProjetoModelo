<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>Versao</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Publicacao de Bps&#xd;
Publicacao de Servicos&#xd;
Comentarios nos componentes&#xd;
Autilizar properties</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition plugin="git-parameter@0.10.0">
          <name>Versao</name>
          <uuid>2d646ff4-fbb6-4a9e-a7f7-ba3d751c6c3d</uuid>
          <type>PT_TAG</type>
          <branch></branch>
          <tagFilter>*</tagFilter>
          <branchFilter>.*</branchFilter>
          <sortMode>DESCENDING_SMART</sortMode>
          <defaultValue>v1.0</defaultValue>
          <selectedValue>TOP</selectedValue>
          <quickFilterEnabled>false</quickFilterEnabled>
          <listSize>5</listSize>
          <requiredParameter>false</requiredParameter>
        </net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>Senha</name>
          <description>Senha para publicacao</description>
          <defaultValue>{AQAAABAAAABALmgFSUkbyVciVNDtOK/2Q1hKs3GFRPVahUp2O9Hu87eACLp1X7jiqbiGo1b+J45x+uxfHk0dIERiu15umNp3wGczFXzyOrCg0Sbt/TETxSI=}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Ambiente</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>PRD</string>
              <string>DEV</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3990.vd281dd77a_388">
    <script>//Publica versao
def URL = &quot;_GITPROJETO_&quot;
def DIR = &quot;Projeto__SIGLAPROJETO_&quot;
def TAG = &quot;_SIGLAPROJETO_&quot;

def HTTP_DEVOPS_B2B = &quot;192.168.56.101:5077&quot;
def SENHA_B2B = &quot;Basic YWRtaW46cGFzc3dvcmQ=&quot;

def HTTP_API_B2B = &quot;192.168.56.101:5074&quot;

def USUARIO_linux = &quot;fabio&quot;
def HOST_linux = &quot;172.17.0.1&quot;

pipeline {
    
   
    agent any
    options {
      timeout(time: 10, unit: &apos;MINUTES&apos;) 
    }
    environment {
        unique_Id = UUID.randomUUID().toString()
    }
    parameters {
        gitParameter name: &apos;Versao&apos;,
                     type: &apos;PT_TAG&apos;,
                     defaultValue: &apos;v1.0&apos;,
                     sortMode: &apos;DESCENDING_SMART&apos;
    }
    stages {
        stage(&apos;Checkout - Tag&apos;) {
            
            steps {
                
                checkout([$class: &apos;GitSCM&apos;,
				branches: [[name: &quot;${params.Versao}&quot;]],
				//branches: [[name: &quot;*/master&quot;]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [],
				gitTool: &apos;Default&apos;,
				submoduleCfg: [],
				userRemoteConfigs: [[url: &quot;${URL}&quot;]]])
            }
        }
		stage(&apos;Pre-Configuracao&apos;) {
            steps {
                
                echo &apos;Configurando Properties...&apos;
			    atualizarConteudoProperties(&quot;${TAG}&quot;)
                
                echo &apos;Criando diretorio temp...&apos;
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} &apos;mkdir -p /tmp/jenkins/$BUILD_TAG &apos; &quot;
			    }
            
			    echo &apos;Enviando arquivo para servidor...&apos;
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;scp Export_${TAG}.xml ${USUARIO_linux}@${HOST_linux}:/tmp/jenkins/$BUILD_TAG/Export_${TAG}.xml &quot;
			    }
			    
			     sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;scp ${TAG}.properties_$Ambiente ${USUARIO_linux}@${HOST_linux}:/tmp/jenkins/$BUILD_TAG/${TAG}.properties &quot;
			    }
			    
			    echo &apos;Colocando comentarios...&apos;
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} &apos; sed -i \&quot;s/&lt;ConfDescription&gt;.*&lt;\\/ConfDescription&gt;/&lt;ConfDescription&gt;Deploy ${params.Versao} git &lt;\\/ConfDescription&gt;/g\&quot; /tmp/jenkins/$BUILD_TAG/Export_${TAG}.xml &apos; &quot;
			    }
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} &apos; sed -i \&quot;s/&lt;COMMENTS&gt;.*&lt;\\/COMMENTS&gt;/&lt;COMMENTS&gt; Deploy ${params.Versao} git &lt;\\/COMMENTS&gt;/g\&quot; /tmp/jenkins/$BUILD_TAG/Export_${TAG}.xml &apos; &quot;
			    }
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} &apos; sed -i \&quot;s/&lt;description&gt;.*&lt;\\/description&gt;/&lt;description&gt;Deploy ${params.Versao} git &lt;\\/description&gt;/g\&quot; /tmp/jenkins/$BUILD_TAG/Export_${TAG}.xml &apos; &quot;
			    }
            }
        }
    
    stage(&apos;Publicando&apos;) {
            steps {
                sshagent([&apos;login_fabio&apos;]) {
                    script {
                         currentBuild.displayName = &apos;Versao: ${params.Versao}&apos;                        
                        try {
                            maskPasswords(varPasswordPairs: [[password: &quot;${Senha}&quot;]]){
                               sh(&quot;ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} &apos;/opt/IBM/SterlingIntegrator/tp_import/import.sh -numberOfThreads 5 -update -input /tmp/jenkins/$BUILD_TAG/Export_${TAG}.xml -passphrase ${Senha} -report /tmp/jenkins/$BUILD_TAG/SAIDA.report &gt; /tmp/jenkins/$BUILD_TAG/SAIDA_COMMANDO.log | exit 0; &apos;&quot;)
                            }            
                          
                        } catch (err) {
                            print(&apos;ERROR: &apos; + err.toString() )
                            error &apos;ERRO ao executar script B2Bi import.sh &apos;
                        }
                    }
                }
                
                sshagent([&apos;login_fabio&apos;]) {
                    script {
                        
                        try {
                           retorno = sh(returnStdout: true, script:&quot;ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} &apos;cat /tmp/jenkins/$BUILD_TAG/SAIDA_COMMANDO.log&apos; &quot;)
                           
                           if (!retorno.contains(&quot;&apos;0&apos;&quot;) ) {
                                unstable(message: &quot;Falha no deploy ${retorno}&quot;)
                            }
                    
                        } catch (err) {
                            print(&apos;ERROR: &apos; + err.toString() )
                            error &apos;ERRO ao realizar o B2Bi import.sh &apos;
                        }
                    }
                }
                
    			sshagent([&apos;login_fabio&apos;]) {
                    script {
                        retornoSh = sh(returnStdout: true, script: &quot;ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} &apos;cat /tmp/jenkins/$BUILD_TAG/SAIDA.report&apos; &quot;).trim()
                    
                        echo &quot;Retorno: ${retornoSh}&quot;
			       } 
    			}
			    
            }            
        }
        

       
        stage(&apos;Publicando Properties Http&apos;) {
            steps {

                sshagent([&apos;login_fabio&apos;]) {
                    script {
                        
                        try {
							print(&quot;Verificando Properties&quot;)
                           retorno = sh(returnStdout: true, 
                           script:&quot;curl -s -i -X GET -H &apos;Accept: application/json&apos; -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; http://${HTTP_API_B2B}/B2BAPIs/svc/propertyfiles/${TAG}/property&quot;)
                           
                           status_code = retorno.trim()
			                // must call trim() to remove the default trailing newline
						  
            			  echo &quot;HTTP response status code: ${status_code} &quot;
            			  
            			  if ((status_code.contains(&apos;HTTP/1.1 200&apos;))) {
							    print(&quot;Properties existe!&quot;)
            				   	echo &quot;Atualizar Properties &quot;
            				   	
            				   	base64Properties = sh(returnStdout: true,   script:&quot;cat ${TAG}.properties_$Ambiente | base64&quot;)
            			
            			       echo &quot;Saida : ${base64Properties}&quot;
            			
            			       retorno = sh(returnStdout: true, 
                                   script:&quot;curl -s -i -X PUT   -H &apos;Content-Type: application/json&apos; -H &apos;Accept: application/json&apos; -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; -d &apos;{ \&quot;propertyFileContent\&quot;: \&quot; &quot; +  base64Properties + &quot;\&quot;, \&quot;replaceExistingPropertySet\&quot;:true, \&quot;propertyFilePrefix\&quot;:\&quot;${TAG}\&quot; , \&quot;description\&quot;:\&quot;Tag: ${params.Versao}\&quot;}&apos;   http://${HTTP_API_B2B}/B2BAPIs/svc/propertyfiles/${TAG}&quot;)
            			       status_code = retorno.trim()
            		      	   echo &quot;HTTP response status code: ${status_code}&quot;
            			       print(&quot;Atualizando Properties !&quot;)
							   
							   
							   
            				} else if (status_code.contains(&apos;HTTP/1.1 404&apos;)) {
            				    
            				    echo &quot;Criar Properties&quot;      
            				    
            			      base64Properties = sh(returnStdout: true,   script:&quot;cat ${SIGLA}.properties_$Ambiente | base64&quot;)
            			
            			       echo &quot;Saida : ${base64Properties}&quot;
            			
            			       retorno = sh(returnStdout: true, 
                                   script:&quot;curl -s -i -X POST -H &apos;Content-Type: application/json&apos; -H &apos;Accept: application/json&apos; -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; -d &apos;{ \&quot;propertyFileContent\&quot;: \&quot; &quot; +  base64Properties + &quot;\&quot;, \&quot;propertyFilePrefix\&quot;:\&quot;${params.SiglaProjeto}\&quot; , \&quot;description\&quot;:\&quot;Tag: ${params.Versao}\&quot;}&apos;   http://${HTTP_API_B2B}/B2BAPIs/svc/propertyfiles/&quot;)
            			       status_code = retorno.trim()
            		      	   echo &quot;HTTP response status code: ${status_code}&quot;
            				} else {
            				    
            				    error(&apos;Erro na Publicacao&apos;)
            				}
            		
                        } catch (err) {
                            print(&apos;ERROR: &apos; + err.toString() )
                            error &apos;ERRO ao realizar o B2Bi import.sh &apos;
                        }
                    }
                }
            }            
        }
        
        stage(&apos;CacheRefresh&apos;) {
            steps {
                
                sshagent([&apos;login_fabio&apos;]) {
                    script {
                        
                        try {
                           retorno = sh(returnStdout: true, 
                           script:&quot;curl -s -i -X POST -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; ${HTTP_DEVOPS_B2B}/atualizarproperties?nomearquivo=${TAG}&quot;)
                           
                           status_code = retorno.trim()
			                // must call trim() to remove the default trailing newline
						  
            			  echo &quot;HTTP response status code: ${status_code}&quot;
            			  
            			  if ((status_code.contains(&apos;HTTP/1.1 200&apos;))) {
            				   	echo &quot;Publicacao realizada com Sucesso&quot;
            			
            			
            			    
            				} else {
            				    error(&apos;Erro na Publicacao&apos;)
            				}
                          
                          
                    
                        } catch (err) {
                            print(&apos;ERROR: &apos; + err.toString() )
                            error &apos;ERRO ao realizar o B2Bi import.sh &apos;
                        }
                       
                    }
                }
            }  
            
        }
        
        
        
    }
}





void atualizarConteudoProperties(String sigla) {
    
    
    def propsOrigem = new Properties()
    File propsFileOrigem = new File(System.getenv(&quot;JENKINS_HOME&quot;)+&apos;/jarCustomizados/config/&apos;+env.getProperty(&quot;Ambiente&quot;)+&apos;_CONFIG_APP_A.properties&apos;)
    propsOrigem.load(propsFileOrigem.newDataInputStream())
    
    def propsDestino = new Properties()  
    File propsFileDestino = new File(env.getProperty(&quot;WORKSPACE&quot;)+&apos;/&apos;+sigla+&apos;.properties&apos;)
    propsDestino.load(propsFileDestino.newDataInputStream())
    
    propsDestino.each { key, value -&gt;

        
        if( &quot;${value}&quot;.startsWith(&quot;_&quot;) ) {
            propsDestino.setProperty(&quot;${key}&quot;, propsOrigem.getProperty(&quot;${value}&quot;) )
        }
    }
    def fileOoutput = new FileOutputStream(env.getProperty(&quot;WORKSPACE&quot;)+&apos;/&apos;+sigla+&apos;.properties_&apos;+env.getProperty(&quot;Ambiente&quot;))
                
    propsDestino.store(fileOoutput, &quot;Deploy Tag: &quot; + env.getProperty(&quot;Versao&quot;) + &quot; - &quot; + env.getProperty(&quot;BUILD_TAG&quot;))
    
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
