<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Fechar versao do Projeto</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>comentario</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3990.vd281dd77a_388">
    <script>// FecharVersao
def URL = &quot;_GITPROJETO_&quot;
def DIR = &quot;Projeto__SIGLAPROJETO_&quot;
def TAG = &quot;_SIGLAPROJETO_&quot;

def HTTP_DEVOPS_B2B = &quot;192.168.56.101:5077&quot;
def HTTP_API_B2B = &quot;192.168.56.101:5074&quot;

def SENHA_B2B = &quot;Basic YWRtaW46cGFzc3dvcmQ=&quot;

import groovy.json.JsonSlurper

pipeline {
    agent any

    stages {
		
		stage(&apos;Checkout&apos;) {
				
		  steps {
		      
		       script { 
                       
                    if ( (params.comentario).length() &lt; 3) {
                        currentBuild.displayName = &quot;ERROR: Comentario curto. &quot;
                    
                        error &apos;Comentario muito curto.&apos;
                    } 
                     
                 }   
		      
			script{

			  cmd = &quot;&quot;&quot;
			        rm -fR ${DIR} 
			        git clone ${URL} ${DIR}
			  &quot;&quot;&quot;
                 status_code = sh(script: cmd, returnStdout: true).trim()
			 	 echo &quot;${status_code}&quot;
			}
		  }
		}
		
	    stage(&apos;Extrair Tag - B2B&apos;) {
				
		  steps {
			script{

			  cmd = &quot;&quot;&quot;
			    curl -X GET -D -  -H \&quot;Authorization: ${SENHA_B2B}\&quot; ${HTTP_DEVOPS_B2B}/v1/export/tag?nomeTag=${TAG} -o ${DIR}/Export_${TAG}.xml
			    
			  &quot;&quot;&quot;
             status_code = sh(script: cmd, returnStdout: true).trim()
             echo &quot;Retorno: ${status_code}&quot;
             
             if ((status_code.contains(&apos;HTTP/1.1 200&apos;))) {
							    
            		echo &quot;Extraido com sucesso &quot;
            } else if (status_code.contains(&apos;HTTP/1.1 404&apos;)) {
                error(&apos;Recurso nao encontrado.&apos;)
            } else {
                 error(&apos;Erro ao extrair Tag&apos;)
            }
			}
		  }
		}
		
		stage(&apos;Extrair Properties - B2B&apos;) {
				
		  steps {
		      
		      script {
                    
                    try {
                       retorno = sh(returnStdout: true, 
                       script:&quot;curl -X GET -D - -H &apos;Accept: application/json&apos; -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; http://${HTTP_API_B2B}/B2BAPIs/svc/propertyfiles/${TAG}/property -o ${DIR}/${TAG}_SAIDA.json&quot;)
                       status_code = retorno.trim()
		               echo &quot;HTTP response status code: ${status_code}&quot;
        			   if ((status_code.contains(&apos;HTTP/1.1 200&apos;))) {
        				   	echo &quot;Atualizar realizada com Sucesso&quot;
        				   	
            				def inputFile = new File(env.getProperty(&quot;WORKSPACE&quot;)+&quot;/${DIR}/${TAG}_SAIDA.json&quot;)
                            def InputJSON = new JsonSlurper().parseText(inputFile.text)
                            
                             def propsDestino = new Properties()  
                             
                            InputJSON.each{ 
                                
                                println it.propertyKey + &quot;=&quot; + it.propertyValue 
                                
                                propsDestino.setProperty(it.propertyKey, it.propertyValue )
                            }
                            
                            def fileOoutput = new FileOutputStream(env.getProperty(&quot;WORKSPACE&quot;)+&quot;/${DIR}/${TAG}.properties&quot;)
                                        
                            propsDestino.store(fileOoutput, &quot;Criado via jankins - ${TAG} &quot;)
    						
    						fileOoutput.close();
        				   	
        				} else if (status_code.contains(&apos;HTTP/1.1 404&apos;)) {
        				    
        				    echo &quot;Necessario Criar Properties&quot;
        				    
        				} else {
        				    
        				    error(&apos;Erro ao ober Properties&apos;)
        				}
                    } catch (err) {
                        print(&apos;ERROR: &apos; + err.toString() )
                        error &apos;ERRO ao realizar o B2Bi import.sh &apos;
                    }
                    
                }
                
                script {
                    cmd = &quot;&quot;&quot;
			               rm -f ./${DIR}/${TAG}_SAIDA.json
			              &quot;&quot;&quot;
                    status_code = sh(script: cmd, returnStdout: true).trim()
			 	    echo &quot;${status_code}&quot;
			     }
                
            }
		}
		
		
	stage(&apos;Atualizar - GIT&apos;) {
				
		  steps {
			script{

			  cmd = &quot;&quot;&quot;
			  
			  cd ${DIR}
			  git add -A			 
			  git commit -m &quot;${comentario}&quot; --author=&quot;jenkins-local &lt;jenkins-local@local.com&gt;&quot;
			  &quot;&quot;&quot;
                 status_code = sh(script: cmd, returnStdout: true).trim()
			 	 echo &quot;${status_code}&quot;
			}
		  }
		}
                   
        stage(&apos;Push - GIT&apos;) {
				
		  steps {
			script{

			  cmd = &quot;&quot;&quot;
			  cd ${DIR}	  
			 
			  git push ${URL}
			  &quot;&quot;&quot;
                 status_code = sh(script: cmd, returnStdout: true).trim()
			 	 echo &quot;${status_code}&quot;
			}
		  }
		}
		
		
		stage(&apos;Nova Tag - GIT&apos;) {
				
		  steps {
			script{

			  cmd = &quot;&quot;&quot;
			  cd ${DIR}			  
			 
			  git tag -a \$(  echo \$(git tag -l --sort=-creatordate | head -n 1 | grep . || echo &apos;v1.-1&apos;) | awk -F &quot;.&quot; &apos;{print \$1 &quot;.&quot; \$2+1 }&apos;) -m &quot;${comentario}&quot;
			     
			  git push --tag
			  &quot;&quot;&quot;
                 status_code = sh(script: cmd, returnStdout: true).trim()                              
                 
			 	 echo &quot;${status_code}&quot;
			}
		 
			script{

			  cmd = &quot;&quot;&quot;
			     cd ${DIR}	
			     git tag -l --sort=-creatordate | head -n 1
			  &quot;&quot;&quot;
                 status_code = sh(script: cmd, returnStdout: true).trim()
                 
                 
                 currentBuild.displayName = &quot;Tag: ${status_code}&quot;
                 
                 
			 	 echo &quot;${status_code}&quot;
			}
		  }
		}
		
		
		
	}
    
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>