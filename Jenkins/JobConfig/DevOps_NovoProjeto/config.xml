def URL_REPO_PROJETO_MODELO = "${JENKINS_HOME}/git/DevOps_B2B_ProjetoModelo/local_remote.git"

def REPO_PRJ =  "${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}_Repo_config.git/" 

def USUARIO_SENHA_JENKINS = "usuario:passw0rd"

def HOST_PORT_JENKINS = "localhost:8080"

def HOST_PORT_B2B_RestApi = "localhost:5074"
def HOST_PORT_B2B_DEVOPS =  "localhost:5077"

def USUARIO_SENHA_B2B =  "ZGFzaF9vcGVyOnBhc3N3b3Jk" // dash_oper:password

def B2B_HOME = "/opt/IBM/SterlingIntegrator"


def USUARIO_linux = "root"
def HOST_linux = "localhost"

import groovy.json.JsonSlurperClassic 



pipeline {    
   
    agent any
    
    options {
      timeout(time: 15, unit: 'MINUTES') 
    }
    environment {
        unique_Id = UUID.randomUUID().toString()
    }
    parameters {
        gitParameter name: 'Versao',
                     type: 'PT_TAG',
                     defaultValue: 'v1.0',
                     sortMode: 'DESCENDING_SMART'
    }
    stages {
        stage('Checkout - Tag') {
            
            steps {
                
                 script { 
                       
                    if ( (params.SiglaProjeto).length() < 3) {
                        currentBuild.displayName = "ERROR: SiglaProjeto curto."
                    
                        error 'SiglaProjeto muito curto.'
                    } 
                     
                 }
                
                
                checkout([$class: 'GitSCM',
				//branches: [[name: "*/master"]],
				branches: [[name: "${params.Versao}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [],
				gitTool: 'Default',
				submoduleCfg: [],
				userRemoteConfigs: [[url: "${URL_REPO_PROJETO_MODELO}"]]])
            }
        }
		
		 stage('Criando Repositorio GIT') {
            steps {
			    echo 'Criando Repositorio GIT'
				
				sh "    rm -Rf ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo "	
				sh "    mkdir -p ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo "
				sh "	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo; git init --bare ${params.SiglaProjeto}_Repo_config.git"
				sh "	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo; git clone ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}_Repo_config.git/ ${params.SiglaProjeto} "
				
			    sh "    cp -R ${JENKINS_HOME}/workspace/${JOB_NAME}/Export_TAG_ProjetoModelo.xml ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}/Export_${params.SiglaProjeto}.xml  "
			    sh "    cp -R ${JENKINS_HOME}/workspace/${JOB_NAME}/PROJETO.properties ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}/${params.SiglaProjeto}.properties  "
			    
				sh "	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}; git config --global user.email 'jenkins@local.com';  git config --global user.name 'Jenkins Local'  "
				
				sh "	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}; git add . ; git commit -m \"Criado via Jenkins\" "
				sh "	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}; git push origin master "
				    
			    	
            }
        }
		
		stage('Pre-Configuracao - B2B') {
            steps {
                                
                echo 'Criando diretorio temp...'
			    sshagent(['login_ssh_servidor_si']) {
                    sh "ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} 'mkdir -p /tmp/jenkins/$BUILD_TAG ' "
			    }
            
			    echo 'Enviando arquivo para servidor...'
			    sshagent(['login_ssh_servidor_si']) {
                    sh "scp Export_TAG_ProjetoModelo.xml ${USUARIO_linux}@${HOST_linux}:/tmp/jenkins/$BUILD_TAG/Export_${params.SiglaProjeto}.xml "
			    }
                
               echo 'Colocando comentarios...'               
               script { 
                   
                   currentBuild.displayName = "Proj: ${params.SiglaProjeto} - Tag Projeto Base: ${params.Versao}"
                
                if ( (params.SiglaProjeto).length() < 3) {
                
                    error 'valor da SiglaProjeto invalido. '
                }
                
			    sshagent(['login_ssh_servidor_si']) {
                    sh "ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} ' sed -i \"s/_siglaProjeto_/${params.SiglaProjeto}/g\" /tmp/jenkins/$BUILD_TAG/Export_${params.SiglaProjeto}.xml ' "
			    }
			    
			    sshagent(['login_ssh_servidor_si']) {
                    sh "ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} ' sed -i \"s/_comentarioBpProjeto_/v1 - criado automaticamente - pode ser deletado/g\" /tmp/jenkins/$BUILD_TAG/Export_${params.SiglaProjeto}.xml ' "
			    }
			    
               }
			    
		    }
        }
    
    stage('Instalando Tag') {
            steps {
                sshagent(['login_ssh_servidor_si']) {
                    script {
                        
                        try {
                            maskPasswords(varPasswordPairs: [[password: "${Senha}"]]){
                               sh("ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} '${B2B_HOME}/tp_import/import.sh -resourcetag USETAGININPUTFILE -numberOfThreads 5 -input /tmp/jenkins/$BUILD_TAG/Export_${params.SiglaProjeto}.xml -passphrase ${Senha} -report /tmp/jenkins/$BUILD_TAG/SAIDA.report > /tmp/jenkins/$BUILD_TAG/SAIDA_COMMANDO.log | exit 0; '")
                            }            
                          
                        } catch (err) {
                            print('ERROR: ' + err.toString() )
                            error 'ERRO ao executar script B2Bi import.sh '
                        }
                    }
                }
                
                sshagent(['login_ssh_servidor_si']) {
                    script {
                        
                        try {
                           retorno = sh(returnStdout: true, script:"ssh -o StrictHostKeyChecking=no -l ${USUARIO_linux} ${HOST_linux} 'cat /tmp/jenkins/$BUILD_TAG/SAIDA_COMMANDO.log' ")
                           
                           if (!retorno.contains("'0'") ) {
                                unstable("Falha na Instalacao da Tag ${retorno}")
                                print("Falha na Instalacao da Tag ${retorno}")
                            }
                    
                        } catch (err) {
                            print('ERROR: ' + err.toString() )
                            error 'ERRO ao realizar o B2Bi import.sh '
                        }
                    }
                }
                
                
                
            }            
        }
        
        stage('Publicando Properties Http') {
            steps {

                sshagent(['login_ssh_servidor_si']) {
                    script {
                        
                        try {
							print("Verificando Properties")
                           retorno = sh(returnStdout: true, 
                           script:"curl -s -i -X GET -H 'Accept: application/json' -H 'Authorization: Basic ${USUARIO_SENHA_B2B}' http://${HOST_PORT_B2B_RestApi}/B2BAPIs/svc/propertyfiles/${params.SiglaProjeto}") 
                           
                           status_code = retorno.trim()
			                // must call trim() to remove the default trailing newline
						  
            			  echo "HTTP response status code: ${status_code} "
            			  
            			  if ((status_code.contains('HTTP/1.1 200'))) {
							    print("Properties existe!")
            				   	echo "Atualizar Properties "
								
							   base64Properties = sh(returnStdout: true,   script:"cat PROJETO.properties | base64")
            			
            			       retorno = sh(returnStdout: true, 
                                   script:"curl -s -i -X PUT   -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Authorization: Basic ${USUARIO_SENHA_B2B}' -d '{ \"propertyFileContent\": \" " + base64Properties + "\", \"replaceExistingPropertySet\":true, \"propertyFilePrefix\":\"${params.SiglaProjeto}\" , \"description\":\"Tag: ${params.Versao}\"}'   http://${HOST_PORT_B2B_RestApi}/B2BAPIs/svc/propertyfiles/${params.SiglaProjeto}")
            			       status_code = retorno.trim()
            		      	   echo "HTTP response status code: ${status_code}"
            			       print("Atualizando Properties !")
							   
							   
							   
            				} else if (status_code.contains('HTTP/1.1 404')) {
            				    
            				    echo "Criar Properties"      
            				    
            			      base64Properties = sh(returnStdout: true,   script:"cat PROJETO.properties | base64")
            			
            			       echo "Saida : ${base64Properties}"
            			
            			       retorno = sh(returnStdout: true, 
                                   script:"curl -s -i -X POST -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Authorization: Basic ${USUARIO_SENHA_B2B}' -d '{ \"propertyFileContent\": \" " +  base64Properties + "\", \"propertyFilePrefix\":\"${params.SiglaProjeto}\" , \"description\":\"Tag: ${params.Versao}\"}'   http://${HOST_PORT_B2B_RestApi}/B2BAPIs/svc/propertyfiles/")
            			       status_code = retorno.trim()
            		      	   echo "HTTP response status code: ${status_code}"
            				    
            				    
            				    
            				} else {
            				    
            				    error('Erro na Publicacao')
            				}
            		
                          
                          
                    
                        } catch (err) {
                            print('ERROR: ' + err.toString() )
                            error 'ERRO ao realizar o B2Bi import.sh '
                        }
                    }
                }
            }            
        }
        
        stage('CacheRefresh') {
            steps {
                
                sshagent(['login_ssh_servidor_si']) {
                    script {
                        
                        try {
                           retorno = sh(returnStdout: true, 
                           script:"curl -s -i -X POST -H 'Authorization: Basic ${USUARIO_SENHA_B2B}' http://${HOST_PORT_B2B_DEVOPS}/atualizarproperties?nomearquivo=${params.SiglaProjeto}")
                           
                           status_code = retorno.trim()
			                // must call trim() to remove the default trailing newline
						  
            			  echo "HTTP response status code: ${status_code}"
            			  
            			  if ((status_code.contains('HTTP/1.1 200'))) {
            				   	echo "Publicacao realizada com Sucesso"  			
            			
            			    
            				} else {
            				    error('Erro na Publicacao')
            				}
                          
                          
                    
                        } catch (err) {
                            print('ERROR: ' + err.toString() )
                            error 'ERRO ao realizar o B2Bi import.sh '
                        }
                       
                    }
                }
            }            
        }


        
        stage('Criando Job ') {
            steps {
                
                
                script {
			    echo 'Criando Repositorio GIT'
			
				CRUMBJson = sh(returnStdout: true,   script:"curl -s http://${HOST_PORT_JENKINS}/crumbIssuer/api/json -u ${USUARIO_SENHA_JENKINS} " )
			
			    def jsonCRUMB = new JsonSlurperClassic().parseText(CRUMBJson)
			    
			    def texto = jsonCRUMB.crumbRequestField + ":"+jsonCRUMB.crumb
			   
                sh " sed -i \"s\\_GITPROJETO_\\${REPO_PRJ}\\g\" Config_Publicar.xml "
			    sh " sed -i \"s\\_SIGLAPROJETO_\\${params.SiglaProjeto}\\g\" Config_Publicar.xml "
			    
			    sh " sed -i  \"s\\_GITPROJETO_\\${REPO_PRJ}\\g\" Config_FecharVersao.xml "
			    sh " sed -i  \"s\\_SIGLAPROJETO_\\${params.SiglaProjeto}\\g\" Config_FecharVersao.xml "
			   
			    sh " curl -s -i -XPOST http://${HOST_PORT_JENKINS}/createItem?name=${params.SiglaProjeto}_Publicar -u ${USUARIO_SENHA_JENKINS} --data-binary @Config_Publicar.xml -H \"" + texto + "\" -H \"Content-Type:text/xml\" "
			   
			    sh " curl -s -i -XPOST http://${HOST_PORT_JENKINS}/createItem?name=${params.SiglaProjeto}_FecharVersao -u ${USUARIO_SENHA_JENKINS} --data-binary @Config_FecharVersao.xml -H \"" + texto + "\" -H \"Content-Type:text/xml\""
			    
			   jsonCRUMB = null
			   CRUMBJson = null
				
				    
                }  
	
				   
            }
        }
        
        
        
    }
}


