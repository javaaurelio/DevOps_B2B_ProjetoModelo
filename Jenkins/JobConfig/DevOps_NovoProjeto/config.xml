<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2214.vb_b_34b_2ea_9b_83">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>Versao</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Planejamento - Criar Projeto&#xd;
Criar o repositorio do Projeto no Git &#xd;
Executar a Pipeline de criacao de projeto no B2B.&#xd;
Criar as Pipeline de publicacao (Job Item) - &#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition plugin="git-parameter@0.10.0">
          <name>Versao</name>
          <uuid>59c837c1-6390-43dc-8d3e-1ab2d301b0e6</uuid>
          <type>PT_TAG</type>
          <tagFilter>*</tagFilter>
          <branchFilter>.*</branchFilter>
          <sortMode>DESCENDING_SMART</sortMode>
          <defaultValue>main</defaultValue>
          <listSize>5</listSize>
          <requiredParameter>false</requiredParameter>
        </net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>Senha</name>
          <description>Senha para publicacao no B2B</description>
          <defaultValue>{AQAAABAAAABAxbEpDhrDCI5yVDL9/BpEOtrx5tteMF1eyuVe/MbPeVu7flzbeMR/9jq/HsUK5ih8U3BBlaqtn0O11fdiQac0j0kkSpjgq84sqPHev6Ff/FU=}</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Ambiente</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>PRD</string>
              <string>DEV</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SiglaProjeto</name>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3990.vd281dd77a_388">
    <script>def URL_REPO_PROJETO_MODELO = &quot;${JENKINS_HOME}/git/DevOps_B2B_ProjetoModelo/local_remote.git&quot;

def REPO_PRJ =  &quot;${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}_Repo_config.git/&quot; 

def USUARIO_SENHA_JENKINS = &quot;aurelio:aurelio@123&quot;

def HOST_PORT_JENKINS = &quot;192.168.56.101:7070&quot;

import groovy.json.JsonSlurperClassic 



pipeline {    
   
    agent any
    
    options {
      timeout(time: 15, unit: &apos;MINUTES&apos;) 
    }
    environment {
        unique_Id = UUID.randomUUID().toString()
    }
    parameters {
        gitParameter name: &apos;Versao&apos;,
                     type: &apos;PT_TAG&apos;,
                     defaultValue: &apos;main&apos;,
                     sortMode: &apos;DESCENDING_SMART&apos;
    }
    stages {
        stage(&apos;Checkout - Tag&apos;) {
            
            steps {
                
                 script { 
                       
                    if ( (params.SiglaProjeto).length() &lt; 3) {
                        currentBuild.displayName = &quot;ERROR: SiglaProjeto curto.&quot;
                    
                        error &apos;SiglaProjeto muito curto.&apos;
                    } 
                     
                 }
                
                
                checkout([$class: &apos;GitSCM&apos;,
				//branches: [[name: &quot;*/master&quot;]],
				branches: [[name: &quot;${params.Versao}&quot;]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [],
				gitTool: &apos;Default&apos;,
				submoduleCfg: [],
				userRemoteConfigs: [[url: &quot;${URL_REPO_PROJETO_MODELO}&quot;]]])
            }
        }
		
		 stage(&apos;Criando Repositorio GIT&apos;) {
            steps {
			    echo &apos;Criando Repositorio GIT&apos;
				
				sh &quot;    rm -Rf ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo &quot;	
				sh &quot;    mkdir -p ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo &quot;
				sh &quot;	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo; git init --bare ${params.SiglaProjeto}_Repo_config.git&quot;
				sh &quot;	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo; git clone ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}_Repo_config.git/ ${params.SiglaProjeto} &quot;
				
			    sh &quot;    cp -R ${JENKINS_HOME}/workspace/${JOB_NAME}/Export_TAG_ProjetoModelo.xml ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}/Export_${params.SiglaProjeto}.xml  &quot;
			    sh &quot;    cp -R ${JENKINS_HOME}/workspace/${JOB_NAME}/PROJETO.properties ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}/${params.SiglaProjeto}.properties  &quot;
			
				sh &quot;	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}; git add . ; git commit -m \&quot;Criado via Jenkins\&quot; &quot;
				sh &quot;	cd ${JENKINS_HOME}/git/${params.SiglaProjeto}_Repo/${params.SiglaProjeto}; git push origin master &quot;
				    
			    	
            }
        }
		
		stage(&apos;Pre-Configuracao - B2B&apos;) {
            steps {
                                
                echo &apos;Criando diretorio temp...&apos;
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;ssh -o StrictHostKeyChecking=no -l fabio 172.17.0.1 &apos;mkdir -p /tmp/jenkins/$BUILD_TAG &apos; &quot;
			    }
            
			    echo &apos;Enviando arquivo para servidor...&apos;
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;scp Export_TAG_ProjetoModelo.xml fabio@172.17.0.1:/tmp/jenkins/$BUILD_TAG/Export_${params.SiglaProjeto}.xml &quot;
			    }
                
               echo &apos;Colocando comentarios...&apos;               
               script { 
                   
                   currentBuild.displayName = &quot;Proj: ${params.SiglaProjeto} - Tag Projeto Base: ${params.Versao}&quot;
                
                if ( (params.SiglaProjeto).length() &lt; 3) {
                
                    error &apos;valor da SiglaProjeto invalido. &apos;
                }
                
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;ssh -o StrictHostKeyChecking=no -l fabio 172.17.0.1 &apos; sed -i \&quot;s/_siglaProjeto_/${params.SiglaProjeto}/g\&quot; /tmp/jenkins/$BUILD_TAG/Export_${params.SiglaProjeto}.xml &apos; &quot;
			    }
			    
			    sshagent([&apos;login_fabio&apos;]) {
                    sh &quot;ssh -o StrictHostKeyChecking=no -l fabio 172.17.0.1 &apos; sed -i \&quot;s/_comentarioBpProjeto_/v1 - criado automaticamente - pode ser deletado/g\&quot; /tmp/jenkins/$BUILD_TAG/Export_${params.SiglaProjeto}.xml &apos; &quot;
			    }
			    
               }
			    
		    }
        }
    
    stage(&apos;Instalando Tag&apos;) {
            steps {
                sshagent([&apos;login_fabio&apos;]) {
                    script {
                        
                        try {
                            maskPasswords(varPasswordPairs: [[password: &quot;${Senha}&quot;]]){
                               sh(&quot;ssh -o StrictHostKeyChecking=no -l fabio 172.17.0.1 &apos;/opt/IBM/SterlingIntegrator/tp_import/import.sh -resourcetag USETAGININPUTFILE -numberOfThreads 5 -input /tmp/jenkins/$BUILD_TAG/Export_${params.SiglaProjeto}.xml -passphrase ${Senha} -report /tmp/jenkins/$BUILD_TAG/SAIDA.report &gt; /tmp/jenkins/$BUILD_TAG/SAIDA_COMMANDO.log | exit 0; &apos;&quot;)
                            }            
                          
                        } catch (err) {
                            print(&apos;ERROR: &apos; + err.toString() )
                            error &apos;ERRO ao executar script B2Bi import.sh &apos;
                        }
                    }
                }
                
                sshagent([&apos;login_fabio&apos;]) {
                    script {
                        
                        try {
                           retorno = sh(returnStdout: true, script:&quot;ssh -o StrictHostKeyChecking=no -l fabio 172.17.0.1 &apos;cat /tmp/jenkins/$BUILD_TAG/SAIDA_COMMANDO.log&apos; &quot;)
                           
                           if (!retorno.contains(&quot;&apos;0&apos;&quot;) ) {
                                unstable(&quot;Falha na Instalacao da Tag ${retorno}&quot;)
                                print(&quot;Falha na Instalacao da Tag ${retorno}&quot;)
                            }
                    
                        } catch (err) {
                            print(&apos;ERROR: &apos; + err.toString() )
                            error &apos;ERRO ao realizar o B2Bi import.sh &apos;
                        }
                    }
                }
                
                
                
            }            
        }
        
        stage(&apos;Publicando Properties Http&apos;) {
            steps {

                sshagent([&apos;login_fabio&apos;]) {
                    script {
                        
                        try {
							print(&quot;Verificando Properties&quot;)
                           retorno = sh(returnStdout: true, 
                           script:&quot;curl -s -i -X GET -H &apos;Accept: application/json&apos; -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; http://192.168.56.101:5074/B2BAPIs/svc/propertyfiles/${params.SiglaProjeto}&quot;) 
                           
                           status_code = retorno.trim()
			                // must call trim() to remove the default trailing newline
						  
            			  echo &quot;HTTP response status code: ${status_code} &quot;
            			  
            			  if ((status_code.contains(&apos;HTTP/1.1 200&apos;))) {
							    print(&quot;Properties existe!&quot;)
            				   	echo &quot;Atualizar Properties &quot;
            			
            			       retorno = sh(returnStdout: true, 
                                   script:&quot;curl -s -i -X PUT   -H &apos;Content-Type: application/json&apos; -H &apos;Accept: application/json&apos; -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; -d &apos;{ \&quot;propertyFileContent\&quot;: \&quot;I0RlcGxveSBUYWc6IHYxLjAgLSBqZW5raW5zLUIyQlByb2pldG9fTW9kZWxvMy0xNAojRnJpIE5vdiAwOCAxNjoxNzoxMSBVVEMgMjAyNAptc2c9SG9qZSBuXHUwMEMzXHUwMEEzbyB0ZW0gYVx1MDBDM1x1MDBBN2FpXCEgCmp3dD1ERVZfS1NBRExKTEFESkxTQURKTFNBREpTQUREQS5ETUEuREFTRDtEO0FTSkRcPVw9QURTQURKU0FLREpBU0RTQUxETFNBREpMREFKRApob3N0PWh0dHBcOi8vd3d3LmRldi5jb20uYnIvCnNxbF9iPXNlbGVjdCAqIGZyb20gQSB3aGVyZSBBIFw9IEEKc3FsX2E9c2VsZWN0ICogZnJvbSBBIHdoZXJlIEEgXD0gQSAKdXN1YXJpbz1VU1VBUklPX0RFVgpOT01FPUZBQklP\&quot;, \&quot;replaceExistingPropertySet\&quot;:true, \&quot;propertyFilePrefix\&quot;:\&quot;${params.SiglaProjeto}\&quot; , \&quot;description\&quot;:\&quot;Tag: ${params.Versao}\&quot;}&apos;   http://192.168.56.101:5074/B2BAPIs/svc/propertyfiles/${params.SiglaProjeto}&quot;)
            			       status_code = retorno.trim()
            		      	   echo &quot;HTTP response status code: ${status_code}&quot;
            			       print(&quot;Atualizando Properties !&quot;)
							   
							   
							   
            				} else if (status_code.contains(&apos;HTTP/1.1 404&apos;)) {
            				    
            				    echo &quot;Criar Properties&quot;      
            				    
            			      base64Properties = sh(returnStdout: true,   script:&quot;cat PROJETO.properties | base64&quot;)
            			
            			       echo &quot;Saida : ${base64Properties}&quot;
            			
            			       retorno = sh(returnStdout: true, 
                                   script:&quot;curl -s -i -X POST -H &apos;Content-Type: application/json&apos; -H &apos;Accept: application/json&apos; -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; -d &apos;{ \&quot;propertyFileContent\&quot;: \&quot; &quot; +  base64Properties + &quot;\&quot;, \&quot;propertyFilePrefix\&quot;:\&quot;${params.SiglaProjeto}\&quot; , \&quot;description\&quot;:\&quot;Tag: ${params.Versao}\&quot;}&apos;   http://192.168.56.101:5074/B2BAPIs/svc/propertyfiles/&quot;)
            			       status_code = retorno.trim()
            		      	   echo &quot;HTTP response status code: ${status_code}&quot;
            				    
            				    
            				    
            				} else {
            				    
            				    error(&apos;Erro na Publicacao&apos;)
            				}
            		
                          
                          
                    
                        } catch (err) {
                            print(&apos;ERROR: &apos; + err.toString() )
                            error &apos;ERRO ao realizar o B2Bi import.sh &apos;
                        }
                    }
                }
            }            
        }
        
        stage(&apos;CacheRefresh&apos;) {
            steps {
                
                sshagent([&apos;login_fabio&apos;]) {
                    script {
                        
                        try {
                           retorno = sh(returnStdout: true, 
                           script:&quot;curl -s -i -X POST -H &apos;Authorization: Basic ZGFzaF9vcGVyOnBhc3N3b3Jk&apos; http://192.168.56.101:5077/atualizarproperties?nomearquivo=${params.SiglaProjeto}&quot;)
                           
                           status_code = retorno.trim()
			                // must call trim() to remove the default trailing newline
						  
            			  echo &quot;HTTP response status code: ${status_code}&quot;
            			  
            			  if ((status_code.contains(&apos;HTTP/1.1 200&apos;))) {
            				   	echo &quot;Publicacao realizada com Sucesso&quot;
            			
            			
            			    
            				} else {
            				    error(&apos;Erro na Publicacao&apos;)
            				}
                          
                          
                    
                        } catch (err) {
                            print(&apos;ERROR: &apos; + err.toString() )
                            error &apos;ERRO ao realizar o B2Bi import.sh &apos;
                        }
                       
                    }
                }
            }            
        }


        
        stage(&apos;Criando Job &apos;) {
            steps {
                
                
                script {
			    echo &apos;Criando Repositorio GIT&apos;
			
				CRUMBJson = sh(returnStdout: true,   script:&quot;curl -s http://${HOST_PORT_JENKINS}/crumbIssuer/api/json -u ${USUARIO_SENHA_JENKINS} &quot; )
			
			    def jsonCRUMB = new JsonSlurperClassic().parseText(CRUMBJson)
			    
			    def texto = jsonCRUMB.crumbRequestField + &quot;:&quot;+jsonCRUMB.crumb
			   
                sh &quot; sed -i \&quot;s\\_GITPROJETO_\\${REPO_PRJ}\\g\&quot; Config_Publicar.xml &quot;
			    sh &quot; sed -i \&quot;s\\_SIGLAPROJETO_\\${params.SiglaProjeto}\\g\&quot; Config_Publicar.xml &quot;
			    
			    sh &quot; sed -i  \&quot;s\\_GITPROJETO_\\${REPO_PRJ}\\g\&quot; Config_FecharVersao.xml &quot;
			    sh &quot; sed -i  \&quot;s\\_SIGLAPROJETO_\\${params.SiglaProjeto}\\g\&quot; Config_FecharVersao.xml &quot;
			   
			    sh &quot; curl -s -i -XPOST http://${HOST_PORT_JENKINS}/createItem?name=${params.SiglaProjeto}_Publicar -u ${USUARIO_SENHA_JENKINS} --data-binary @Config_Publicar.xml -H \&quot;&quot; + texto + &quot;\&quot; -H \&quot;Content-Type:text/xml\&quot; &quot;
			   
			    sh &quot; curl -s -i -XPOST http://${HOST_PORT_JENKINS}/createItem?name=${params.SiglaProjeto}_FecharVersao -u ${USUARIO_SENHA_JENKINS} --data-binary @Config_FecharVersao.xml -H \&quot;&quot; + texto + &quot;\&quot; -H \&quot;Content-Type:text/xml\&quot;&quot;
			    
			   jsonCRUMB = null
			   CRUMBJson = null
				
				    
                }  
	
				   
            }
        }
        
        
        
    }
}

</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>